#+title: Configurations

All kinds of textual configuration files that can potentially get shared among multiple machines.

* Emacs

** Prerequisites

- Using [[https://develop.spacemacs.org/][Spacemacs]]
- Dependencies
  - ~base64~ :: For ~ansi-term~ integration.
  - ~CopyQ~ :: For clipboard integration.
  - [[https://github.com/kanglmf/emacs-chinese-word-segmentation][~emacs-chinese-word-segmentation~]] :: How we navigate between Chinese words.
  - ~fcitx5~ :: If you are not using ~fcitx~, remove any thing in the file related to [[https://github.com/cute-jumper/fcitx.el][~fcitx.el~]].
  - [[https://dandavison.github.io/delta/installation.html][~git-delta~]] :: Magit add-on (~magit-delta~).
  - [[https://ledger-cli.org/docs.html][~ledger~]] :: If you ever use Ledger for accounting.
  - [[https://ollama.ai/][~ollama~]] :: For ~ellama~.
  - ~ripgrep~ :: For [[https://github.com/dajva/rg.el][~rg.el~]] usages.
  - ~xclip~ :: For sharing clipboard with X system.
  - ~xdotool~, ~xprop~, ~xwininfo~ :: For the ~emacs-everywhere~ mode.
  - ~xsel~ :: For ~xclipboard~.
  - ~zoxide~ :: To allow quick jumps to recently used directories.
- Font Dependencies:
  - [[https://aur.archlinux.org/packages/ttf-all-the-icons][~ttf-all-the-icons~]] :: The icons needed by Spacemacs to display file type icons.
    (Otherwise you will need to run ~M-x all-the-icons-install-fonts~ yourself.)
  - [[https://github.com/laishulu/Sarasa-Term-SC-Nerd][~Sarasa Term SC Nerd~]] :: Mono-space fonts for CJK characters.
  - [[https://github.com/googlefonts/noto-emoji][~Noto Color Emoji~]] :: Emoji display.

** Recommendations

- Accommodate ~org-???-file_path~ to your liking (and find some ways to sync them with your phone).
- Adjusts font sizes to suit your monitor DPI.
- Use Emacs builds with native compilation enabled.
- Start Emacs as a daemon (with ~emacs.service~) and ~alias emacs="emacsclient -c"~â€‹.
  If you are using fcitx, remember to ~systemctl --user edit emacs.service~ to add environment variables
  (like ~Environment=XMODIFIERS=@im=fcitx~).
- Personally, I also ~alias vim="emacsclient -nw -c"~.
- If you are using any proxy with environment variables like ~http_proxy~ set,
  whitelist ~mirrors.tuna.tsinghua.edu.cn~ (maybe with ~no_proxy~ (not tested yet)).
- Set up [[https://github.com/tecosaur/emacs-everywhere][~emacs-everywhere~]] by binding a shortcut to calling ~emacsclient -c --eval '(emacs-everywhere)'~.
- Set up a shortcut to capture new org-mode to-do items (~emacsclient -c -e '(org-capture)'~).
- Put your projects under ~~/Workspaces~ (or else change the paths listed in ~mine/git-config~ in the ~.spacemacs~ config).
- Configure a [[https://orgmode.org/worg/org-contrib/org-protocol.html][~org-protocol~]] handler (possibly via Arch Linux AUR package ~org-protocol-emacsclient~).

** Usage

#+begin_src shell
  ln -s absolute_path_to_this_dir/.spacemacs ~/.spacemacs
  git clone git_url_of_spacemacs
#+end_src

** Workarounds

*** Org mode broken?

See https://github.com/syl20bnr/spacemacs/issues/15896.

* Zsh

** Prerequisites

- ~fzf~: For fuzzy matching.
- ~oh-my-zsh~: In ~$HOME/.oh-my-zsh~.
- ~tmux~: Used when connecting with SSH.
- ~trash-cli~: For the ~alias tp=trash-put~ alias.
- ~zoxide~.
- ~zsh-syntax-highlighting~.

** Usage

#+begin_src shell
  ln -s absolute_path_to_this_dir/.zshrc ~/.zshrc
#+end_src

* i3 + Picom (under Xfce)

An opinionated i3 configuration.
(It does not configure any panels since personally I use ~xfce4-panel~.

** Prerequisites

- ~i3~: The window manager.
- ~picom~: Compositor.
- ~nitrogen~: Wallpaper.

** Usage

#+begin_src shell
  ln -s absolute_path_to_this_dir/i3_config ~/.config/i3/config
  ln -s absolute_path_to_this_dir/picom.conf ~/.config/picom.conf
#+end_src

** Extra configuration

*** Launch i3 from Xfce

#+begin_src shell
  xfconf-query -c xfce4-session -p /sessions/Failsafe/Client0_Command -t string -sa "xfsettingsd"
  xfconf-query -c xfce4-session -p /sessions/Failsafe/Client1_Command -t string -sa "i3"
  # The fifth command is xfdesktop which we are not going to use.
  xfconf-query -c xfce4-session -p /sessions/Failsafe/Count -t int -s 4
#+end_src

** Remove gtk window border

Getting a pixel-perfect scroll-bar is a luxury these days...
(See also [[https://artemis.sh/2023/10/12/scrollbars.html][Scrollbars are becoming a problem]] ([[https://news.ycombinator.com/item?id=37864867][HN discussion]]).)
And by "pixel-perfect" I mean that, for a window adjacent to screen edges,
their scroll-bars should lie exactly next to the screen edge,
with no annoying extra pixels demanding your exquisite cursor positioning.

Anyway, to do so, you will need to remove all the borders that add to the offset of the scrollbars.
See [[https://askubuntu.com/questions/61280/how-to-remove-the-resize-grip-in-gtk3-windows][How to remove the resize grip in gtk3 windows?]] and [[https://www.reddit.com/r/awesomewm/comments/u3237d/how_can_i_get_rid_of_these_borders_on_gkt_apps/][How can I get rid of these borders on gkt apps?]] for extra instructions on gtk2.

For gtk3, add the following CSS to your ~$HOME/.config/gtk-3.0/gtk.css~ file:

#+begin_src css
  .window-frame {
    box-shadow: 0 0 0 0;
    margin: 0;
  }
  window decoration {
    margin: 0;
    padding: 0;
    border: none;
  }
  ,* {
    -GtkWindow-resize-grip-default: false;
  }
#+end_src

For gtk4, see [[https://gitlab.com/sulincix/xnocsd][Xnocsd]]. In short, add the following to ~$HOME/.config/gtk-4.0/gtk.css~ file:

#+begin_src css
  headerbar,
  csd,
  csd-solid,
  window,
  decoration {
    box-shadow: none;
    padding: 0px;
    margin: 0px;
    border-radius: 0px;
    border: none;
  }
#+end_src
